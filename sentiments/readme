
Specification

analyzer.py
Complete the implementation of analyzer.py in such a way that

__init__ loads positive and negative words into memory in such a way that analyze can access them, and

analyze analyzes the sentiment of text, returning a positive score if text is more positive than negative, a negative score if text is more negative than positive, and 0 otherwise, whereby that score is computed as follows:

assign each word in text a value: 1 if the word is in positives, -1 if the word is in negatives, and 0 otherwise

consider the sum of those values to be the entire text’s score

For instance, if text were "I love you" (and Analyzer were instantiated with default values for its named parameters), then its score would be 0 + 1 + 0 = 1, since

"I" is in neither positive-words.txt nor negative-words.txt,

"love" is in positive-words.txt, and

"you" is in neither positive-words.txt nor negative-words.txt.

Suffice it to say, more sophisticated algorithms exist, but we’ll keep things simple!

tweets
Complete the implementation of main in tweets in such a way that program

accepts one and only one command-line argument, the screen name for a user on Twitter,

queries Twitter’s API for a user’s most recent 50 tweets,

analyzes the sentiment of each of those tweets, and

outputs each tweet’s score and text, colored in green if positive, red if negative, and yellow otherwise.

application.py
Complete the implementation of search in application.py in such a way that the function

queries Twitter’s API for a user’s most recent 100 tweets,

classifies each tweet as positive, negative, or neutral,

generates a chart that accurately depicts those sentiments as percentages.

If a user has tweeted fewer than 100 times, classify as many tweets as exist.
